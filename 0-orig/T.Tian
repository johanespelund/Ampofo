/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2112                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
  {
    version     2.0;
    format      ascii;
    class       volScalarField;
object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions [0 0 0 1 0 0 0];

#include "../parameters"

internalField uniform $T_avg;

boundaryField
  {
    /* adiabatic */
    /* { */
    /*   type zeroGradient; */
    /*   value uniform $T_avg; */
    /* } */
    /* conducting */
    /* { */
    /*   type codedFixedValue; */
    /*   value uniform $T_avg; */

    /*   // name of generated boundary condition */
    /*   name    conductingWall; */

    /*   code */
    /*   #{ */
    /*       const fvPatch& patch = this->patch(); */
    /*       scalarField& T = *this; */
    /*       const scalar l = 0.75; */
    /*       const scalar t_right = 283.15; */
    /*       const scalar t_left = 323.15; */

    /*       forAll(patch, faceI) */
    /*       { */
    /*           const scalar x = patch.Cf()[faceI].x(); */
    /*           T[faceI] = t_left + (t_right - t_left) * x / l; */
    /*       } */
    /*   #}; */
    /* } */

    /* wall_bottom */
    /* { */
    /*   type zeroGradient; */
    /*   value uniform $T_avg; */
    /* } */
    wall_top
    {
      type            fixedValue;
      value           uniform $T_avg;

      /* // name of generated boundary condition */
      /* name    conductingWall; */

      /* code */
      /* #{ */
      /*     const fvPatch& patch = this->patch(); */
      /*     scalarField& T = *this; */
      /*     const scalar l = 0.75; */
      /*     const scalar t_right = 283.15; */
      /*     const scalar t_left = 323.15; */

      /*     forAll(patch, faceI) */
      /*     { */
      /*         const scalar x = patch.Cf()[faceI].x(); */
      /*         T[faceI] = t_left + (t_right - t_left) * x / l; */
      /*     } */
      /* #}; */
    }
    wall_bottom
    {
      $wall_top;
    }
    "proc.*"
    {
      type processor;
    }
    wall_left
    {
      type fixedValue;
      value uniform $T_left;
    }
    wall_right
    {
      type fixedValue;
      value uniform $T_right;
    }
    frontAndBack
    {
      type empty;
    }
  }

// ************************************************************************* //
