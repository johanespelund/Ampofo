/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2112                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
  version     2.0;
  format      ascii;
  class       dictionary;
  object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs ("libbuoyancyTurbSourceFvModels.so")

tau #calc " 0.75";

#include "../parameters"

solver          fluid;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         2.5;

deltaT          1e-4;

writeControl    adjustableRunTime;

writeInterval   0.5;

purgeWrite      9;

writeFormat     binary;

writePrecision  9;

writeCompression off;

timeFormat      general;

timePrecision   9;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           0.5;

maxDeltaT       3600;

functions
{
  #includeFunc residuals(p_rgh,h,Ux,Uy,k,epsilon,omega)
  wallHeatFlux
  {
    #includeEtc "caseDicts/postProcessing/fields/wallHeatFlux"
    executeControl timeStep;
    executeInterval 1;
    writeControl writeTime;
    writeInterval 1;
  }
  Q_left
  {
    #includeEtc "caseDicts/postProcessing/surfaceFieldValue/patchValue.cfg"
    patch wall_left;
    fields (wallHeatFlux);
    operation areaIntegrate;
  }
  Q_right { $Q_left; patch wall_right; }
  Q_top { $Q_left; patch wall_top; }
  Q_bottom { $Q_left; patch wall_bottom; }

  linesample
  {
    type sets;
    libs (sampling);
    writeControl writeTime;
    writeInterval 1;
    interpolationScheme cellPointFace;
    setFormat csv;
    sets
      (
      vertical
      {
        type lineFace;
        axis z;
        start (#calc " 0.5*$L_x" #calc "0.5*$L_y" -1e3);
        end (#calc " 0.5*$L_x " #calc " 0.5*$L_y" 1e3);
      }
      horizontal
      {
        type lineFace;
        axis x;
        start (-1e3 #calc "0.5*$L_y" #calc "0.5*$L_z");
        end (1e3 #calc "0.5*$L_y" #calc "0.5*$L_z");
      }
      );
    fields (T p U rho thermo:mu TMean UMean rhoMean kMean nutMean);
  }

  left_wall
  {
    start (0 #calc "0.5*$L_y" -1e3);
    end (0 #calc "0.5*$L_y"  1e3);
    fields (wallHeatFlux wallHeatFluxMean);
    axis z;
    setFormat csv;
    #includeEtc "caseDicts/postProcessing/graphs/graphCellFace.cfg"
    writeControl writeTime;
    writeInterval 1;
  }

  right_wall
  {
    $left_wall
    start ($L_x #calc "0.5*$L_y" -1e3);
    end ($L_x #calc "0.5*$L_y"  1e3);
  }

  yPlus  // The name of the function object, can be anything you like
  {
    type            yPlus;         // Specifies that this function object calculates yPlus
    libs            ("libfieldFunctionObjects.so");  // The library to load
    writeControl    writeTime;     // When to write the yPlus data, e.g., every time step ('timeStep') or based on the write interval ('writeTime')
    log             true;          // Output yPlus values to the standard output (log)
  }
  fieldAverage1
  {
      type                    fieldAverage;
      libs ( "libfieldFunctionObjects.so" );
      enabled               true;
      writeControl       writeTime;
      timeStart             0;
      timeEnd           $endTime;
      resetOnOutput     true;
          
      fields
      (
          U
          {
              mean           on;
              prime2Mean  on;
              base           time;
          }
          T
          {
              mean           on;
              prime2Mean  on;
              base           time;
          }
          rho
          {
              mean           on;
              prime2Mean  off;
              base           time;
          }
          nut
          {
              mean           on;
              prime2Mean  off;
              base           time;
          }
          wallHeatFlux
          {
              mean           on;
              prime2Mean  off;
              base           time;
          }
          wallShearStress
          {
              mean           on;
              prime2Mean  off;
              base           time;
          }
          k
          {
              mean           on;
              prime2Mean  off;
              base           time;
          }
          p
         {
              mean           on;
              prime2Mean  off;
              base           time;
          } 
      );
  }
}

// ************************************************************************* //
