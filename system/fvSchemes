/*--------------------------------*- C++ -*----------------------------------*\
|j =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2112                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    // default         Euler;
    default         CrankNicolson 0.5;
    // default         backward;
}

gradSchemes
{
  default  Gauss linear;
  // grad(h)  cellLimited Gauss linear 1;
  // grad(k) cellMDLimited Gauss linear 1;
  // grad(h) cellMDLimited Gauss linear 0.5;
}

divSchemes
{
    default         none;
    div(phi,U)      Gauss limitedLinearV 1;
    div(phi,h)      Gauss limitedLinear 1;
    div(phi,K)      Gauss limitedLinear 1;
    div(meshPhi,p)  Gauss linear;
    // turbulence      Gauss upwind;
    turbulence      Gauss limitedLinear 1;
    // turbulence      Gauss linearUpwind grad(k);
    div(phi,k)      $turbulence;
    div(phi,omega)  $turbulence;
    div(phi,epsilon) $turbulence;
    div(phi,ReThetat) $turbulence;
    div(phi,gammaInt) $turbulence;
    div(phi,f)  $turbulence;
    div(phi,phit)  $turbulence;
    div(phi,v2)  $turbulence;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

gradLimiter 1;

laplacianSchemes
{
    default         Gauss linear orthogonal;
    // default         Gauss linear limited $gradLimiter;
    // // grad(p)         Gauss linear limited 0.333;
    // grad(p_rg)      Gauss linear limited 0.333;
    // laplacian(alphaEff,h) Gauss linear limited 0.1;
    
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    // default          limited $gradLimiter;
    default          orthogonal;
    // snGrad(p)        limited 0.333;
    // snGrad(p_rg)     limited 0.333;
    // snGrad(h)        limited 0.5;
}

// Important for k-omega-SST
wallDist
{
    method meshWave;
}

